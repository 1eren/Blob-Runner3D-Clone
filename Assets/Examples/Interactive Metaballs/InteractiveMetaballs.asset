%YAML 1.1
%TAG !u! tag:unity3d.com,2011:
--- !u!114 &11400000
MonoBehaviour:
  m_ObjectHideFlags: 0
  m_CorrespondingSourceObject: {fileID: 0}
  m_PrefabInstance: {fileID: 0}
  m_PrefabAsset: {fileID: 0}
  m_GameObject: {fileID: 0}
  m_Enabled: 1
  m_EditorHideFlags: 0
  m_Script: {fileID: 11500000, guid: 3acd6fe57257048db802c1c4c2b75248, type: 3}
  m_Name: InteractiveMetaballs
  m_EditorClassIdentifier: 
  shaderName: TransformProvider
  shaderReference: {fileID: 4800000, guid: d36b7ffba7b1e4d39b4e60e89ae1f03d, type: 3}
  shaderTemplate: uRaymarching/Forward/Standard
  variables:
  - key: Name
    value: TransformProvider
  - key: ObjectShape
    value: CUBE
  - key: RaymarchingShaderDirectory
    value: Assets\uRaymarching\Shaders\Include\Legacy
  - key: RenderType
    value: Opaque
  - key: RenderQueue
    value: Geometry
  conditions:
  - key: ShadowCaster
    value: 1
  - key: FullScreen
    value: 0
  - key: WorldSpace
    value: 1
  - key: FollowObjectScale
    value: 0
  - key: CameraInsideObject
    value: 0
  - key: UseRaymarchingDepth
    value: 1
  - key: FallbackToDiffuse
    value: 1
  - key: Blend
    value: 0
  - key: UseCameraDepthTexture
    value: 0
  - key: DisableViewCulling
    value: 0
  - key: SphericalHarmonicsPerPixel
    value: 1
  - key: ForwardAdd
    value: 1
  - key: FallbackToStandardShader
    value: 0
  - key: UseGrabPass
    value: 0
  blocks:
  - key: Properties
    value: "[Header(Additional Parameters)]\n_Smooth(\"Smooth\", float) = 1.0\n_Scale
      (\"Scale\", float) = 0.5    \n_CubeColor(\"Cube Color\", Color) = (1.0, 1.0,
      1.0, 1.0)\n_SphereColor(\"Sphere Color\", Color) = (1.0, 1.0, 1.0, 1.0)\n_TorusColor(\"Torus
      Color\", Color) = (1.0, 1.0, 1.0, 1.0)\n_PlaneColor(\"Plane Color\", Color)
      = (1.0, 1.0, 1.0, 1.0)\n_Cube1Color(\"Cube1 Color\", Color) = (1.0, 1.0, 1.0,
      1.0)\n_Cube2Color(\"Cube2 Color\", Color) = (1.0, 1.0, 1.0, 1.0)"
    folded: 0
  - key: DistanceFunction
    value: "// These inverse transform matrices are provided\n// from TransformProvider
      script \nfloat4x4 _Cube;\nfloat4x4 _Sphere;\nfloat4x4 _Sphere1;\nfloat4x4 _Torus;\nfloat4x4
      _Plane; \nfloat4x4 _Cube1; \nfloat4x4 _Cube2; \n\nfloat _Smooth;\nfloat _Scale;\n\ninline
      float DistanceFunction(float3 wpos)\n{\n    float4 cPos = mul(_Cube, float4(wpos,
      1.0));\n    float4 sPos = mul(_Sphere, float4(wpos, 1.0));\n    float4 s1Pos
      = mul(_Sphere1, float4(wpos, 1.0));\n    float4 tPos = mul(_Torus, float4(wpos,
      1.0));\n    float4 pPos = mul(_Plane, float4(wpos, 1.0));\n    float4 c1Pos
      = mul(_Cube1, float4(wpos, 1.0));\n    float4 c2Pos = mul(_Cube2, float4(wpos,
      1.0));\n    \n    float s = Sphere(sPos, _Scale);\n    float s1 = Sphere(s1Pos,
      _Scale);\n    float c = Box(cPos, 0.5);\n    float c1 = Box(c1Pos, 0.5);\n   
      float c2 = Box(c2Pos, 0.5);\n    float t = Torus(tPos, float2(0.5, 0.2));\n   
      float p = Plane(pPos, float3(0, 1, 0));\n\n    float sc = SmoothMin(s, c, _Smooth);\n   
      float tp = SmoothMin(t, p, _Smooth);\n\n    float x = SmoothMin(sc, tp, _Smooth);\n   
      float y = SmoothMin(c1, c2, _Smooth);\n\n    float z = SmoothMin(x, y, _Smooth);\n\n   
      return SmoothMin(z, s1, _Smooth);\n}"
    folded: 1
  - key: PostEffect
    value: "float4 _CubeColor;\nfloat4 _SphereColor;\nfloat4 _TorusColor;\nfloat4
      _PlaneColor;\nfloat4 _Cube1Color;\nfloat4 _Cube2Color;\n\ninline void PostEffect(RaymarchInfo
      ray, inout PostEffectOutput o)\n{\n    float3 wpos = ray.endPos;\n    float4
      cPos = mul(_Cube, float4(wpos, 1.0));\n    float4 sPos = mul(_Sphere, float4(wpos,
      1.0));\n    float4 tPos = mul(_Torus, float4(wpos, 1.0));\n    float4 pPos
      = mul(_Plane, float4(wpos, 1.0));\n    \n    float4 c1Pos = mul(_Cube1, float4(wpos,
      1.0));\n    float4 c2Pos = mul(_Cube2, float4(wpos, 1.0));\n    \n    float
      s = Sphere(sPos, _Scale);\n    float c = Box(cPos, 0.5);\n    float t = Torus(tPos,
      float2(0.5, 0.2));\n    float p = Plane(pPos, float3(0, 1, 0));\n\n    float
      c1 = Box(c1Pos, 0.5);\n    float c2 = Box(c2Pos, 0.5);\n    \n    float4 a
      = float4(2.0 / s, 2.0 / c, 2.0 / t, 2.0 / p);\n\n    float4 b = float4(2.0
      / c1, 2.0 / c2, 0, 0);\n\n    fixed3 computeAlbedo1 =\n        a.x * _SphereColor
      +\n        a.y * _CubeColor +\n        a.z * _TorusColor +\n        a.w * _PlaneColor;\n\n   
      fixed3 computeAlbedo2 =\n        b.x * _Cube1Color +\n        b.y * _Cube2Color;\n\n   
      fixed3 result = normalize(fixed3(computeAlbedo1 + computeAlbedo2));\n    \n   
      o.Albedo =\n     result;\n}"
    folded: 1
  constants: {fileID: 11400000, guid: b54b57bcc672e49638fe9b2da609c4df, type: 2}
  basicFolded: 0
  conditionsFolded: 1
  variablesFolded: 1
  materialsFolded: 0
  constantsFolded: 0
